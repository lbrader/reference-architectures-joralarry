pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '30'))
        timestamps()
        ansiColor('xterm')
    }

    environment {
        APP_DATACENTER = ''
        APP_MAIN = pwd()
		GIT_URL = 'https://github.com/{{ git_org_id }}/{{ git_main_repo_name }}'
		GIT_CREDENTIALS = '{{ jenkins_github_credential }}'
		GIT_BRANCH = 'master'
    }

    stages {
       stage('Check Preconditions') {
          when {
              expression {
                   env.BRANCH_NAME != 'dev' && env.BRANCH_NAME != 'test' && env.BRANCH_NAME != 'master'
              }
          }
          steps {
              script {
                  currentBuild.result = 'ABORTED'
              }
              error('Image is built only against dev,test and master branch')
          }
        }

        stage('Get APP') {
            steps {
                script {

                        checkout( [$class: 'GitSCM',
                            branches: [[name: '*/master' ]],
                            userRemoteConfigs: [[
                                credentialsId: '{{ jenkins_github_credential }}',
                                url: 'https://github.com/{{ git_org_id }}/{{ git_main_repo_name }}']]
                            ]
                        )

                      }

            }


        }

        stage('Get Image To Build') {
           steps {
               script {

                dir('infrastructure/images/{{ git_repo_name }}') {
                       git branch: env.BRANCH_NAME, credentialsId: '{{ jenkins_github_credential }}', url: 'https://github.com/{{ git_org_id }}/{{ git_repo_name }}.git'
                     }
                   }
           }


               }

         stage('Install APP') {
            steps {
                sh 'ls -la infrastructure/images'
                sh 'ls -la infrastructure/images/{{ git_repo_name }}/'
            }
         }
           stage('Install APP and manage docker images') {
            steps {
                withCredentials([azureServicePrincipal('{{ jenkins_azure_credential }}')]) {

                        sh 'chmod +x build-scripts.sh'
                        sh './build-scripts.sh $BRANCH_NAME {{ git_repo_name }}'

                        }
            }


                }

    }

   post {
             always {
                echo 'Job finished'
                deleteDir() /* clean up our workspace */
            }
            success {
                echo 'Job succeeeded!'
            }
            unstable {
                echo 'Job unstable :/'
            }
            changed {
                echo 'Things were different before...'
            }
            failure {
             echo 'Job failed :('
             mail to: '{{ notification_email }}',
             subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
             body: "Something is wrong with ${env.BUILD_URL}"
             }
        }
}
